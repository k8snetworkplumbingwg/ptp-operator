name: PTP Nightly Failure Detector

on:
  schedule:
    # Run every day at 8 AM EST (1 PM UTC) to check for new failures
    - cron: '0 13 * * *'
  workflow_dispatch:
    inputs:
      openshift_version:
        description: 'OpenShift version to check (e.g., 4.21, 4.22) or "main" for latest'
        required: false
        default: 'main'
        type: string
      lookback_hours:
        description: 'Hours to look back for failures'
        required: false
        default: '24'
        type: string

env:
  DEFAULT_OPENSHIFT_VERSION: "main"
  DEFAULT_LOOKBACK_HOURS: "24"

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  detect-failures:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/upstream-ci'
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up environment variables
        run: |
          echo "OPENSHIFT_VERSION=${{ github.event.inputs.openshift_version || env.DEFAULT_OPENSHIFT_VERSION }}" >> $GITHUB_ENV
          echo "LOOKBACK_HOURS=${{ github.event.inputs.lookback_hours || env.DEFAULT_LOOKBACK_HOURS }}" >> $GITHUB_ENV
          echo "START_TIME=$(date -u -d "${{ github.event.inputs.lookback_hours || env.DEFAULT_LOOKBACK_HOURS }} hours ago" +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Make failure detection script executable
        run: |
          # Use the existing script file from repository
          chmod +x ptp_failure_detector.sh
          echo "Using existing ptp_failure_detector.sh script from repository"

      - name: Run failure detection
        id: detect
        run: ./ptp_failure_detector.sh

      - name: Create failure report
        if: steps.detect.outputs.failure_count > 0
        run: |
          cat > failure_report.md << EOF
          # 🚨 PTP Nightly Test Failures Detected

          **Detection Time:** ${{ steps.detect.outputs.check_time }}
          **OpenShift Version:** ${{ env.OPENSHIFT_VERSION }}
          **Failures Found:** ${{ steps.detect.outputs.failure_count }}
          **Lookback Period:** ${{ env.LOOKBACK_HOURS }} hours

          ## 📋 Summary

          Automated failure detection found ${{ steps.detect.outputs.failure_count }} PTP-related test failures in the nightly runs for OpenShift ${{ env.OPENSHIFT_VERSION }}.

          ## 🚨 Detected Failures

          \`\`\`
          $(cat detected_failures.txt 2>/dev/null || echo "No detailed failure logs available")
          \`\`\`

          ## 🔍 Investigation Required

          Please review the job failures and artifacts to identify:
          - PTP configuration issues
          - Hardware/driver problems
          - Test environment issues
          - Code regressions

          **Note:** Platform failures and infrastructure issues are filtered out from this report.

          ## 🔗 Useful Links

          - [Prow Dashboard](https://prow.ci.openshift.org/?job=**e2e-telco5g-ptp**)
          - [PTP Operator Repository](https://github.com/k8snetworkplumbingwg/ptp-operator)
          - [OpenShift PTP Documentation](https://docs.openshift.com/container-platform/${{ env.OPENSHIFT_VERSION }}/networking/using-ptp.html)

          ## 🤖 AI Analysis Available

          To get AI-powered analysis of these failures, comment \`@ai-triage\` on this issue.

          ---
          *Generated by PTP Nightly Failure Detector on $(date -u)*
          EOF

      - name: Check if issue already exists
        if: steps.detect.outputs.failure_count > 0
        id: check_issue
        run: |
          # Check if there's already an open issue for today's failures
          issue_title="PTP Nightly Failures - $(date -u +%Y-%m-%d) - OpenShift ${{ env.OPENSHIFT_VERSION }}"

          # Use GitHub CLI to search for existing issues
          existing_issue=$(gh issue list --search "$issue_title" --state open --json number,title --jq '.[0].number // empty' || echo "")

          echo "issue_exists=${existing_issue}" >> $GITHUB_OUTPUT
          echo "issue_title=$issue_title" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create or update GitHub issue
        if: steps.detect.outputs.failure_count > 0
        run: |
          if [[ -n "${{ steps.check_issue.outputs.issue_exists }}" ]]; then
            echo "📝 Updating existing issue #${{ steps.check_issue.outputs.issue_exists }}"
            gh issue comment ${{ steps.check_issue.outputs.issue_exists }} --body-file failure_report.md
          else
            echo "📝 Creating new GitHub issue"
            gh issue create \
              --title "${{ steps.check_issue.outputs.issue_title }}" \
              --body-file failure_report.md \
              --label "bug,ptp,nightly-failure,needs-investigation"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Post summary
        run: |
          if [[ "${{ steps.detect.outputs.failure_count }}" -gt "0" ]]; then
            echo "## 🚨 PTP Failure Detection Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Failures detected:** ${{ steps.detect.outputs.failure_count }}" >> $GITHUB_STEP_SUMMARY
            echo "- **OpenShift version:** ${{ env.OPENSHIFT_VERSION }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Time range:** Last ${{ env.LOOKBACK_HOURS }} hours" >> $GITHUB_STEP_SUMMARY
            echo "- **GitHub issue:** Created/Updated" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "See the created GitHub issue for detailed failure analysis." >> $GITHUB_STEP_SUMMARY
          else
            echo "## ✅ PTP Status Check" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "No PTP test failures detected in the last ${{ env.LOOKBACK_HOURS }} hours for OpenShift ${{ env.OPENSHIFT_VERSION }}." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ptp-failure-detection-${{ github.run_number }}
          path: |
            ptp_failure_detector.sh
            failure_report.md
            detected_failures.txt
          retention-days: 30