name: CI tests AWS
on:
  pull_request_target:
    types: [labeled, synchronize]  # Triggered when the PR is labeled or synchronized (PR code changed)
permissions:
  id-token: write
  contents: read
  pull-requests: write
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.head.repo.full_name }}-${{ github.event.pull_request.head.ref }}
  cancel-in-progress: true
jobs:
  deploy-ec2:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Remove ok-to-test label if new commit
        uses: actions/github-script@v7
        with:
          script: |
            const label = "ok-to-test";
            const pr = context.payload.pull_request;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            const labels = pr.labels.map(l => l.name);

            if (!labels.includes(label)) {
              core.setFailed(`Missing required '${label}' label. PR is not ok to test.`);
              return;
            }
            console.log(`eventName='${context.eventName}', action='${context.payload.action}'.`)
            // Only remove the label if this is a new commit
            if (context.eventName === 'pull_request_target' && context.payload.action === 'synchronize') {
              await github.rest.issues.removeLabel({
                owner,
                repo,
                issue_number: pr.number,
                name: label,
              });
              core.setFailed(`Removed '${label}' due to new push to PR. Please add new ok-to-test label to test.`);
            } else {
              console.log(`Label '${label}' found â€” code not changed, still ok to test.`);
            }
      - name: Checkout the code from the user fork
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          path: ptp-operator

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
            role-to-assume: arn:aws:iam::058264082309:role/github-oidc-setup-david-Role-Kk44xkca6vIm
            role-session-name: ${{ github.run_id }}
            aws-region: us-east-1

      - name: Launch EC2 instance
        id: launch
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-03f4e4724537a687c \
            --subnet-id subnet-04ee218fe8f32cad5 \
            --instance-type m6a.xlarge \
            --security-group-ids sg-05e700edc2ed0a2d5 \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=ptp-operator PR-${{ github.event.number }}-${{ github.actor }}},{Key=ci-job-fullname,Value=PR-${{ github.event.number }}-${{ github.actor }}},{Key=ci-org-name,Value=${{ github.event.pull_request.head.repo.owner.login }}},{Key=ci-repo-name,Value=${{ github.event.pull_request.head.repo.name }}},{Key=ci-job-source,Value=k8ci},{Key=ci-job-branch,Value=${{ github.event.pull_request.head.ref }}},{Key=ci-job-type,Value=ptp-test}]' \
            --query 'Instances[0].InstanceId' \
            --key-name ptp-sshkey-1 \
            --output text)

          echo "instance_id=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Wait for instance and get public IP
        id: wait
        run: |
          aws ec2 wait instance-running --instance-ids $instance_id
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $instance_id \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          echo "public_ip=$PUBLIC_IP" >> $GITHUB_ENV
          PRIVATE_IP=$(aws ec2 describe-instances \
            --instance-ids $instance_id \
            --query 'Reservations[0].Instances[0].PrivateIpAddress' \
            --output text)
          echo "private_ip=$PRIVATE_IP" >> $GITHUB_ENV
          
      - name: Wait for instance to be online
        run: |
          ./ptp-operator/scripts/retry.sh 180 10 sh -c "aws ssm describe-instance-information --query \"InstanceInformationList[?InstanceId=='$instance_id'].PingStatus\" --output text | grep -q 'Online'"

      - name: Run test script
        run: |
            echo "VM IP is $public_ip"
            eval "$(ssh-agent -s)"
            ssh-keygen -t rsa -b 4096 -f temp_key -N ""
            aws ssm send-command --instance-ids $instance_id \
                --document-name "AWS-RunShellScript" \
                --parameters 'commands=["sudo bash -c '\''echo '"$(cat temp_key.pub)"' >> /home/fedora/.ssh/authorized_keys'\''"]'
            
            ssh-add temp_key
            
            ./ptp-operator/scripts/retry.sh 60 5 ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null fedora@"$public_ip" uptime
            rsync -r -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" ptp-operator fedora@"$public_ip":~/.
            ssh -o StrictHostKeyChecking=no \
                -o UserKnownHostsFile=/dev/null \
                -o ServerAliveInterval=60 \
                -o ServerAliveCountMax=10 \
                -o ConnectTimeout=30 \
                -o TCPKeepAlive=yes \
                fedora@"$public_ip" \
                "set +e; \
                sudo ./ptp-operator/scripts/run-on-vm.sh '$private_ip'; \
                exit_code=\$?; \
                echo '=== Script completed with exit code:' \$exit_code '==='; \
                echo '=== Recent system logs ==='; \
                sudo journalctl --no-pager -n 100 --since '5 minutes ago'; \
                echo '=== End of logs ==='; \
                exit \$exit_code"
      - name: Cleanup - Delete EC2 instance
        if: always()  # Ensure cleanup runs even if previous steps fail
        run: |
            echo "Cleaning up EC2 INSTANCE_ID=$instance_id"
            aws ec2 terminate-instances --instance-ids $instance_id

      - name: Notify cleanup complete
        run: echo "Cleanup task completed."